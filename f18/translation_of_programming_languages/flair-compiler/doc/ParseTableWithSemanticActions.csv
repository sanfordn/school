,program,(,),;,.,function,:,",",begin,token.identifier,end,return,integer,boolean,<,=,or,+,-,and,*,/,if,then,else,not,token.integer_token,token.boolean_token,print
PROGRAM,program token.identifier {make-Identifier} ( <FORMALS> ) ; <DEFINITIONS> {make-Definitions} <BODY> . {make-Program},,,,,,,,,,,,,,,,,,,,,,,,,,,,
DEFINITIONS,,,,,,<DEF> <DEFINITIONS>,,,ε,,,,,,,,,,,,,,,,,,,,
DEF,,,,,,function token.identifier {make-Identifier} ( <FORMALS> ) : <TYPE> <BODY> ; {make-Function},,,,,,,,,,,,,,,,,,,,,,,
FORMALS,,,ε,,,,,,,<NONEMPTYFORMALS> {make-Formals},,,,,,,,,,,,,,,,,,,
NONEMPTYFORMALS,,,ε,,,,,,,<FORMAL> <NONEMPTYFORMALS'>,,,,,,,,,,,,,,,,,,,
NONEMPTYFORMALS',,,ε,,,,,", <NONEMPTYFORMALS> ",,,,,,,,,,,,,,,,,,,,,
FORMAL,,,,,,,,,,token.identifier {make-Identifier} : <TYPE> {make-Formal},,,,,,,,,,,,,,,,,,,
BODY,,,,,,,,,begin <STATEMENT-LIST> end {make-Body},,,,,,,,,,,,,,,,,,,,
STATEMENT-LIST,,,,,,,,,,,,return <EXPR> {make-ReturnStatement},,,,,,,,,,,,,,,,,<PRINT-STATEMENT> <STATEMENT-LIST>
TYPE,,,,,,,,,,,,,integer {make-Type},boolean {make-Type},,,,,,,,,,,,,,,
EXPR,,<SIMPLE-EXPR> <EXPR'>,,,,,,,,<SIMPLE-EXPR> <EXPR'>,,,,,,,,,<SIMPLE-EXPR> <EXPR'>,,,,<SIMPLE-EXPR> <EXPR'>,,,<SIMPLE-EXPR> <EXPR'>,<SIMPLE-EXPR> <EXPR'>,<SIMPLE-EXPR> <EXPR'>,
EXPR',,,ε,,,,,ε,,,ε,,,,< <SIMPLE-EXPR> {make-LessThan} <EXPR'>, = <SIMPLE-EXPR> {make-EqualTo} <EXPR'>,ε,ε,ε,ε,ε,ε,,ε,ε,,,,
SIMPLE-EXPR,,<TERM> <SIMPLE-EXPR'>,,,,,,,,<TERM> <SIMPLE-EXPR'>,,,,,,,,,<TERM> <SIMPLE-EXPR'>,,,,<TERM> <SIMPLE-EXPR'>,,,<TERM> <SIMPLE-EXPR'>,<TERM> <SIMPLE-EXPR'>,<TERM> <SIMPLE-EXPR'>,
SIMPLE-EXPR',,,ε,,,,,ε,,,ε,,,,ε,ε,or <TERM> {make-OrExpr} <SIMPLE-EXPR'>,+ <TERM> {make-PlusExpr} <SIMPLE-EXPR'>,- <TERM> {make-MinusExpr} <SIMPLE-EXPR'>,ε,ε,ε,,ε,ε,,,,
TERM,,<FACTOR> <TERM'>,,,,,,,,<FACTOR> <TERM'>,,,,,,,,,<FACTOR> <TERM'>,,,,<FACTOR> <TERM'>,,,<FACTOR> <TERM'>,<FACTOR> <TERM'>,<FACTOR> <TERM'>,
TERM',,,ε,,,,,ε,,,ε,,,,ε,ε,ε,ε,ε,and <FACTOR> {make-AndExpr} <TERM'>,* <FACTOR> {make-TimesExpr} <TERM'>,/ <FACTOR> {make-DivideExpr} <TERM'>,,ε,ε,,,,
FACTOR,,( <EXPR> ),,,,,,,,token.identifier {make-Identifier} <FACTOR'>,,,,,,,,,- <FACTOR> {make-NegateExpr},,,,if <EXPR> then <EXPR> else <EXPR> {make-IfStatement},,,not <FACTOR> {make-NotExpr},<LITERAL>,<LITERAL>,
FACTOR',,( <ACTUALS> ) {make-FunctionCall},ε,,,,,ε,,,ε,,,,ε,ε,ε,ε,ε,ε,ε,ε,,ε,ε,,,,
ACTUALS,,<NONEMPTYACTUALS> {make-Actuals},ε,,,,,,,<NONEMPTYACTUALS> {make-Actuals},,,,,,,,,<NONEMPTYACTUALS> {make-Actuals},,,,<NONEMPTYACTUALS> {make-Actuals},,,<NONEMPTYACTUALS> {make-Actuals},<NONEMPTYACTUALS> {make-Actuals},<NONEMPTYACTUALS> {make-Actuals},
NONEMPTYACTUALS,,<EXPR> {make-Actual} <NONEMPTYACTUALS'>,,,,,,,,<EXPR> {make-Actual} <NONEMPTYACTUALS'>,,,,,,,,,<EXPR> {make-Actual} <NONEMPTYACTUALS'>,,,,<EXPR> {make-Actual} <NONEMPTYACTUALS'>,,,<EXPR> {make-Actual} <NONEMPTYACTUALS'>,<EXPR> {make-Actual} <NONEMPTYACTUALS'>,<EXPR> {make-Actual} <NONEMPTYACTUALS'>,
NONEMPTYACTUALS',,,ε,,,,,", <NONEMPTYACTUALS>",,,,,,,,,,,,,,,,,,,,,
LITERAL,,,,,,,,,,,,,,,,,,,,,,,,,,,token.integer_token {make-IntegerLiteral},token.boolean_token {make-BooleanLiteral},
PRINT-STATEMENT,,,,,,,,,,,,,,,,,,,,,,,,,,,,,print ( <EXPR> ) ; {make-PrintStatement}