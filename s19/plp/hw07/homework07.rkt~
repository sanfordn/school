;;  ------------------------------------------------------------------------
;; |   FILE           :  homework07.rkt                                     |
;; |   AUTHOR         :  Eugene Wallingford                                 |
;; |   CREATION DATE  :  2019/03/07                                         |
;; |   DESCRIPTION    :  a preprocessor for our little language             |
;; |                     and functions that analyze programs in the core    |
;;  ------------------------------------------------------------------------
;; |   MODIFIED BY    :  ??????????                                         |
;; |   CREATION DATE  :  2019/03/??                                         |
;; |   DESCRIPTION    :  [ what you added and changed ]                     |
;;  ------------------------------------------------------------------------

#lang racket
(require "syntax-procs.rkt")
(provide (all-defined-out))   ; exports every function defined in the file

;;  ------------------------------------------------------------------------
;;   This code works with the following grammar:
;;
;;                       --------------------------- CORE FEATURES
;;        <exp>      ::= <varref>
;;                     | ( lambda ( <var> ) <exp> )
;;                     | ( <exp> <exp> )
;;                       --------------------------- ABSTRACTIONS
;;                     | ( let (<exp> <exp>) <exp> )
;;  ------------------------------------------------------------------------

;; --------------------------------------------------------------------------
;; preprocess :: full-exp -> core-exp
;; --------------------------------------------------------------------------

(define preprocess
  (lambda (exp)
    (cond
      ( (varref? exp) exp)
      ( (lambda? exp)
           (list 'lambda (list (lambda->param exp))
                 (preprocess (lambda->body exp))) )
      ( (app? exp)
           (list (preprocess (app->proc exp))
                 (preprocess (app->arg  exp))) )
      ( else  ;; let
           (let ((var  (let->var  exp))
                 (val  (let->val  exp))
                 (body (let->body exp)))
             (list (list 'lambda (list var) (preprocess body))
                   (preprocess val)) ) ))))

;; --------------------------------------------------------------------------
;; functions that analyze expressions in the core language
;; --------------------------------------------------------------------------

;; occurs-bound? :: core-exp -> boolean

(define occurs-bound?
  (lambda (s exp)
    (cond ((varref? exp) #f)
          ((app? exp)    (or (occurs-bound? s (app->proc exp))
                             (occurs-bound? s (app->arg  exp))))
          ((lambda? exp) (or (occurs-bound? s (lambda->body exp))
                             (and (eq? s (lambda->param exp))
                                  (occurs-free? s (lambda->body exp)))))
          (else (error 'occurs-bound? "invalid exp ~a" exp)))))

;; occurs-free? :: core-exp -> boolean

(define occurs-free?
  (lambda (s exp)
    (cond ((varref? exp) (eq? s exp))
          ((app? exp)    (or (occurs-free? s (app->proc exp))
                             (occurs-free? s (app->arg  exp))))
          ((lambda? exp) (and (not (eq? s (lambda->param exp)))
                              (occurs-free? s (lambda->body exp))))
          (else (error 'occurs-free? "invalid exp ~a" exp)))))

;; --------------------------------------------------------------------------
;; functions you write for Homework 7 go below
;; --------------------------------------------------------------------------

;; --------------------------------------------------------------------------
